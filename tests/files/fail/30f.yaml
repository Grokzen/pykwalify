---
name:  sequence1
desc:  sequence test
#
schema:
  type: seq
  required: true
  sequence:
    - type: str
      required: true
#
data:
  - foo
  - bar
  -
  - baz
  - 100
#
errors:
  - "Value '100' is not of type 'str'. Path: '/4'"
  - "required.novalue : '/2'"
  ## Kwalify errors
  # - "Value 'None' is not of type 'str'. Path: '/2'"
  # :required_novalue   : (line 3)[/2] value required but none.
  # :type_unmatch       : (line 5)[/4] '100': not a string.
##
---
name:  mapping1
desc:  mapping test
#
schema:
  type: map
  required: true
  mapping:
    name:
      type: str
      required: true
    email:
      type: str
      # This pattern value was modified from /@/ to .+@.+ to make it copmatible with python
      pattern: .+@.+
      required: yes
    age:
      type: int
    blood:
      type: str
      enum:
        - A
        - B
        - O
        - AB
    # TODO: Date type is not yet implemented
    # birth:
    #   type: date
#
data:
  nam: foo
  email: foo(at)mail.com
  age: twenty
  blood: ab
  # birth: Jul 01, 1985
#
errors:
  - "Cannot find required key 'name'. Path: ''"
  - "Enum 'ab' does not exist. Path: '/blood'"
  - "Key 'nam' was not defined. Path: ''"
  - "Value 'foo(at)mail.com' does not match pattern '.+@.+'. Path: '/email'"
  - "Value 'twenty' is not of type 'int'. Path: '/age'"
  ## Kwalify errors
  # :required_nokey     : 1:1:[/] key 'name:' is required.
  # :key_undefined      : 1:1:[/nam] key 'nam:' is undefined.
  # :pattern_unmatch    : 2:1:[/email] 'foo(at)mail.com': not matched to pattern /@/.
  # :type_unmatch       : 3:1:[/age] 'twenty': not a integer.
  # :enum_notexist      : 4:1:[/blood] 'ab': invalid blood value.
  # :type_unmatch       : 5:1:[/birth] 'Jul 01, 1985': not a date.
##
---
name:  nested1
desc:  nest of seq and map
#
schema:
  type: map
  required: true
  mapping:
    address-book:
      type: seq
      required: true
      sequence:
        - type: map
          mapping:
            name:
              type: str
              required: yes
            email:
              type: str
              pattern: .+@.+
              required: yes
            age:
              type: int
            blood:
              type: str
              enum:
                - A
                - B
                - O
                - AB
            # TODO: Date type is not yet implemented
            # birth:
            #   type:       date
#
data:
  address-book:
    - name: foo
      mail: foo@mail.com
      age: twenty
      blood: ab
      # birth: 1985/01/01
    - name: bar
      email: bar(at)mail.com
#
errors:
  - "Cannot find required key 'email'. Path: '/address-book/0'"
  - "Enum 'ab' does not exist. Path: '/address-book/0/blood'"
  - "Key 'mail' was not defined. Path: '/address-book/0'"
  - "Value 'bar(at)mail.com' does not match pattern '.+@.+'. Path: '/address-book/1/email'"
  - "Value 'twenty' is not of type 'int'. Path: '/address-book/0/age'"
  ## Kwalify errors
  # - TODO: Missing error "6:5:[/address-book/0/birth] '1985/01/01': not a date"
  # :required_nokey     : 2:5:[/address-book/0] key 'email:' is required.
  # :key_undefined      : 3:5:[/address-book/0/mail] key 'mail:' is undefined.
  # :type_unmatch       : 4:5:[/address-book/0/age] 'twenty': not a integer.
  # :enum_notexist      : 5:5:[/address-book/0/blood] 'ab': invalid blood value.
  # :type_unmatch       : 6:5:[/address-book/0/birth] '1985/01/01': not a date.
  # :pattern_unmatch    : 8:5:[/address-book/1/email] 'bar(at)mail.com': not matched to pattern /@/.
##
---
name:  anchor1
desc:  schema with anchor
#
schema:
  type: seq
  required: true
  sequence:
    - type: map
      required: true
      mapping:
        first-name: &name
          type: str
          required: yes
        family-name: *name
#
data:
  - first-name:  foo
    last-name:   Foo
  - first-name:  bar
    family-name: 100
errors:
  - "Cannot find required key 'family-name'. Path: '/0'"
  - "Key 'last-name' was not defined. Path: '/0'"
  - "Value '100' is not of type 'str'. Path: '/1/family-name'"
  ## Kwalify errors
  # :required_nokey     : 1:3:[/0] key 'family-name:' is required.
  # :key_undefined      : 2:3:[/0/last-name] key 'last-name:' is undefined.
  # :type_unmatch       : 4:3:[/1/family-name] '100': not a string.
##
---
name:  anchor2
desc:  schema with anchor 2
#
schema:
  type:        map
  required:    true
  mapping:
    title: &name
      type:       str
      required:   true
    address-book:
      type:       seq
      required:   true
      sequence:
        - type:   map
          mapping:
            name: *name
            email:
              type:       str
              required:   yes
#
data:
  title:   my friends
  address-book:
    - name:  100
      email: foo@mail.com
    - first-name:  bar
      email: bar@mail.com
#
errors:
  - "Cannot find required key 'name'. Path: '/address-book/1'"
  - "Key 'first-name' was not defined. Path: '/address-book/1'"
  - "Value '100' is not of type 'str'. Path: '/address-book/0/name'"
  ## Kwalify errors
  # :type_unmatch       : 3:5:[/address-book/0/name] '100': not a string.
  # :required_nokey     : 5:5:[/address-book/1] key 'name:' is required.
  # :key_undefined      : 5:5:[/address-book/1/first-name] key 'first-name:' is undefined.
# TODO: THIS TEST IS BROKEN BECUASE IT CAUSE INFINITE RECURSION IN PYTHON
# ##
# ---
# name:  anchor3
# desc:  document with anchor
# #
# schema:
#   type: seq
#   sequence:
#     - &employee
#       type: map
#       mapping:
#         name:
#           type: str
#         post:
#           type: str
#           enum:
#             - exective
#             - manager
#             - clerk
#         supervisor: *employee
# #
# data:
#   - &foo
#     name:  100
#     post:  exective
#     supervisor: *foo
#   - &bar
#     name:  foo
#     post:  worker
#     supervisor: *foo
# #
# errors:
#   - ''
#   ## Kwalify errors
#   # :type_unmatch       : 2:3:[/0/name] '100': not a string.
#   # :enum_notexist      : 7:3:[/1/post] 'worker': invalid post value.
##
---
name:  range1
desc:  range test && bug#?????
#
schema:
  type: map
  mapping:
   "max-only":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {max: 100}
   "min-only":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {min: 10.0}
   "max-and-min":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {max: 100.0, min: 10.0}
#
data:
  max-only:
    - 101
    - 100.1
  min-only:
    - 9
    - 9.99
  max-and-min:
    - 101
    - 100.1
    - 9
    - 9.99
#
errors:
  - "Type 'scalar' has size of '100.1', greater than max limit '100'. Path: '/max-only/1'"
  - "Type 'scalar' has size of '100.1', greater than max limit '100.0'. Path: '/max-and-min/1'"
  - "Type 'scalar' has size of '101', greater than max limit '100'. Path: '/max-only/0'"
  - "Type 'scalar' has size of '101', greater than max limit '100.0'. Path: '/max-and-min/0'"
  - "Type 'scalar' has size of '9', less than min limit '10.0'. Path: '/max-and-min/2'"
  - "Type 'scalar' has size of '9', less than min limit '10.0'. Path: '/min-only/0'"
  - "Type 'scalar' has size of '9.99', less than min limit '10.0'. Path: '/max-and-min/3'"
  - "Type 'scalar' has size of '9.99', less than min limit '10.0'. Path: '/min-only/1'"
  ## Kwalify errors
  # :range_toolarge     : 2:3:[/max-only/0] '101': too large (> max 100).
  # :range_toolarge     : 3:3:[/max-only/1] '100.1': too large (> max 100).
  # :range_toosmall     : 5:3:[/min-only/0] '9': too small (< min 10.0).
  # :range_toosmall     : 6:3:[/min-only/1] '9.99': too small (< min 10.0).
  # :range_toolarge     : 8:3:[/max-and-min/0] '101': too large (> max 100.0).
  # :range_toolarge     : 9:3:[/max-and-min/1] '100.1': too large (> max 100.0).
  # :range_toosmall     : 10:3:[/max-and-min/2] '9': too small (< min 10.0).
  # :range_toosmall     : 11:3:[/max-and-min/3] '9.99': too small (< min 10.0).
##
---
name:  range2
desc:  range test (with max-ex and min-ex)
#
schema:
  type:  map
  mapping:
   "max-ex-only":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {max-ex: 100}
   "min-ex-only":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {min-ex: 10.0}
   "max-ex-and-min-ex":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {max-ex: 100.0, min-ex: 10.0}
#
data:
  max-ex-only:
    - 100
    - 100.0
  min-ex-only:
    - 10
    - 10.0
  max-ex-and-min-ex:
    - 100
    - 100.0
    - 10
    - 10.0
#
errors:
  - "Type 'scalar' has size of '10', less than or equals to min limit(exclusive) '10.0'. Path: '/max-ex-and-min-ex/2'"
  - "Type 'scalar' has size of '10', less than or equals to min limit(exclusive) '10.0'. Path: '/min-ex-only/0'"
  - "Type 'scalar' has size of '10.0', less than or equals to min limit(exclusive) '10.0'. Path: '/max-ex-and-min-ex/3'"
  - "Type 'scalar' has size of '10.0', less than or equals to min limit(exclusive) '10.0'. Path: '/min-ex-only/1'"
  - "Type 'scalar' has size of '100', greater than or equals to max limit(exclusive) '100'. Path: '/max-ex-only/0'"
  - "Type 'scalar' has size of '100', greater than or equals to max limit(exclusive) '100.0'. Path: '/max-ex-and-min-ex/0'"
  - "Type 'scalar' has size of '100.0', greater than or equals to max limit(exclusive) '100'. Path: '/max-ex-only/1'"
  - "Type 'scalar' has size of '100.0', greater than or equals to max limit(exclusive) '100.0'. Path: '/max-ex-and-min-ex/1'"
  ## Kwalify errors
  # :range_toolargeex   : 2:3:[/max-ex-only/0] '100': too large (>= max 100).
  # :range_toolargeex   : 3:3:[/max-ex-only/1] '100.0': too large (>= max 100).
  # :range_toosmallex   : 5:3:[/min-ex-only/0] '10': too small (<= min 10.0).
  # :range_toosmallex   : 6:3:[/min-ex-only/1] '10.0': too small (<= min 10.0).
  # :range_toolargeex   : 8:3:[/max-ex-and-min-ex/0] '100': too large (>= max 100.0).
  # :range_toolargeex   : 9:3:[/max-ex-and-min-ex/1] '100.0': too large (>= max 100.0).
  # :range_toosmallex   : 10:3:[/max-ex-and-min-ex/2] '10': too small (<= min 10.0).
  # :range_toosmallex   : 11:3:[/max-ex-and-min-ex/3] '10.0': too small (<= min 10.0).
##
---
name:  range3
desc:  range test (with max, min, max-ex and min-ex)
#
schema:
  type:  map
  mapping:
   "A":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {max: 100, min-ex: 10.0}
   "B":
      type: seq
      sequence:
        - type: number
          required: yes
          range: {min: 10, max-ex: 100.0}
#
data:
  A:
    - 100.00001
    - 10.0
  B:
    - 9.99999
    - 100.0
#
errors:
  - "Type 'scalar' has size of '10.0', less than or equals to min limit(exclusive) '10.0'. Path: '/A/1'"
  - "Type 'scalar' has size of '100.0', greater than or equals to max limit(exclusive) '100.0'. Path: '/B/1'"
  - "Type 'scalar' has size of '100.00001', greater than max limit '100'. Path: '/A/0'"
  - "Type 'scalar' has size of '9.99999', less than min limit '10'. Path: '/B/0'"
  ## Kwalify errors
  # :range_toolarge     : 2:3:[/A/0] '100.00001': too large (> max 100)"
  # :range_toosmallex   : 3:3:[/A/1] '10.0': too small (<= min 10.0).
  # :range_toosmall     : 5:3:[/B/0] '9.99999': too small (< min 10).
  # :range_toolargeex   : 6:3:[/B/1] '100.0': too large (>= max 100.0).
##
---
name:  length1
desc:  length test
#
schema:
  type: map
  mapping:
   "max-only":
      type: seq
      sequence:
        - type: str
          length: {max: 8}
   "min-only":
      type: seq
      sequence:
        - type: str
          length: {min: 4}
   "max-and-min":
      type: seq
      sequence:
        - type: str
          length: {max: 8, min: 4}
#
data:
  max-only:
    - hogehoge!
  min-only:
    - foo
    -
  max-and-min:
    - foobarbaz
    - foo
#
errors:
  - "Value: 'foo' has length of '3', greater than min limit '4'. Path: '/max-and-min/1'"
  - "Value: 'foo' has length of '3', greater than min limit '4'. Path: '/min-only/0'"
  - "Value: 'foobarbaz' has length of '9', greater than max limit '8'. Path: '/max-and-min/0'"
  - "Value: 'hogehoge!' has length of '9', greater than max limit '8'. Path: '/max-only/0'"
  ## Kwalify errors
  # :length_toolong     : 2:3:[/max-only/0] 'hogehoge!': too long (length 9 > max 8).
  # :length_tooshort    : 4:3:[/min-only/0] 'foo': too short (length 3 < min 4).
  # :length_toolong     : 7:3:[/max-and-min/0] 'foobarbaz': too long (length 9 > max 8).
  # :length_tooshort    : 8:3:[/max-and-min/1] 'foo': too short (length 3 < min 4).
##
---
name:  length2
desc:  length test (with max-ex and min-ex)
#
schema:
  type: map
  mapping:
   "max-ex-only":
      type: seq
      sequence:
        - type: str
          length: {max-ex: 8}
   "min-ex-only":
      type: seq
      sequence:
        - type: str
          length: {min-ex: 4}
   "max-ex-and-min-ex":
      type: seq
      sequence:
        - type: str
          length: {max-ex: 8, min-ex: 4}
#
data:
  max-ex-only:
    - hogehoge
  min-ex-only:
    - foo!
    -
  max-ex-and-min-ex:
    - foobarba
    - foo!
#
errors:
  - "Value: 'foo!' has length of '4', greater than min_ex limit '4'. Path: '/max-ex-and-min-ex/1'"
  - "Value: 'foo!' has length of '4', greater than min_ex limit '4'. Path: '/min-ex-only/0'"
  - "Value: 'foobarba' has length of '8', greater than max_ex limit '8'. Path: '/max-ex-and-min-ex/0'"
  - "Value: 'hogehoge' has length of '8', greater than max_ex limit '8'. Path: '/max-ex-only/0'"
  ## Kwalify errors
  # :length_toolongex   : 2:3:[/max-ex-only/0] 'hogehoge': too long (length 8 >= max 8).
  # :length_tooshortex  : 4:3:[/min-ex-only/0] 'foo!': too short (length 4 <= min 4).
  # :length_toolongex   : 7:3:[/max-ex-and-min-ex/0] 'foobarba': too long (length 8 >= max 8).
  # :length_tooshortex  : 8:3:[/max-ex-and-min-ex/1] 'foo!': too short (length 4 <= min 4).
##
---
name:  length3
desc:  length test (with min, max, max-ex and min-ex)
#
schema:
  type: map
  mapping:
   "A":
      type: seq
      sequence:
        - type: str
          length: {max: 8, min-ex: 4}
   "B":
      type: seq
      sequence:
        - type: str
          length: {max-ex: 8, min: 4}
#
data:
  A:
    - hogehoge!
    - hoge
  B:
    - hogehoge
    - hog
#
errors:
  - "Value: 'hog' has length of '3', greater than min limit '4'. Path: '/B/1'"
  - "Value: 'hoge' has length of '4', greater than min_ex limit '4'. Path: '/A/1'"
  - "Value: 'hogehoge!' has length of '9', greater than max limit '8'. Path: '/A/0'"
  - "Value: 'hogehoge' has length of '8', greater than max_ex limit '8'. Path: '/B/0'"
  ## Kwalify errors
  # :length_toolong     : 2:3:[/A/0] 'hogehoge!': too long (length 9 > max 8).
  # :length_tooshortex  : 3:3:[/A/1] 'hoge': too short (length 4 <= min 4).
  # :length_toolongex   : 5:3:[/B/0] 'hogehoge': too long (length 8 >= max 8).
  # :length_tooshort    : 6:3:[/B/1] 'hog': too short (length 3 < min 4).
##
---
name:  unique1
desc:  unique constraint test with map
#
schema:
  type: seq
  sequence:
    - type: map
      mapping:
       "name":
          unique: yes
       "age":
          type: int
#
data:
  - name: foo
    age:  10
  - name: bar
    age:  10
  - age:  10
    name: bar
#
errors:
  - "Value 'bar' is not unique. Previous path: '/1/name'. Path: '/2/name'"
  ## Kwalify errors
  # :value_notunique    : 6:3:[/2/name] 'bar': is already used at '/1/name'.
##
---
name:  unique2
desc:  unique constraint test with seq
#
schema:
  type: seq
  sequence:
    - type: str
      unique: yes
#
data:
  - foo
  - ~
  - bar
  - ~
  - bar
#
errors:
  - "Value 'bar' is not unique. Previous path: '/2'. Path: '/4'"
  ## Kwalify errors
  # :value_notunique    : 5:1:[/4] 'bar': is already used at '/2'.
##
---
name:  unique3
desc:  unique constraint and '<<' (merge)
#
schema:
    type: seq
    sequence:
      - type: map
        mapping:
         "name":
           type: str
           required: yes
           unique: yes
         "value": 
           type: any
           required: yes
#
data:
  - &a1
    name:  x1
    value: 10
  - <<: *a1
  - <<: *a1         # wrong validation error
    name:  x3
#
errors:
  - "Value 'x1' is not unique. Previous path: '/0/name'. Path: '/1/name'"
  # TODO: Possibly missing one error here...
  ## Kwalify errors
  # :value_notunique    : 4:3:[/1/name] 'x1': is already used at '/0/name'.
  # :value_notunique    : 5:3:[/2/name] 'x1': is already used at '/0/name'.
# TODO: Keyword assert is not yet implemented in pykwalify
# ##
# ---
# name:  assert1
# desc:  assert test
# #
# schema:
#   type: seq
#   sequence:
#     - type: map
#       mapping:
#        "less-than":
#           type: number
#           assert: val < 8
#        "more-than":
#           type: number
#           assert: 3 < val
#        "between":
#           type: number
#           assert: 3 < val && val < 8
#        "except":
#           type: number
#           assert: val < 3 || 8 < val
# #
# data:
#   java: ~
#   ruby: |
#     - less-than: 8
#     - more-than: 3
#     - between: 2.9
#     - except: 3.1
# errors:
#   - ''
#   # :assert_failed      : 1:3:[/0/less-than] '8': assertion expression failed (val < 8).
#   # :assert_failed      : 2:3:[/1/more-than] '3': assertion expression failed (3 < val).
#   # :assert_failed      : 3:3:[/2/between] '2.9': assertion expression failed (3 < val && val < 8).
#   # :assert_failed      : 4:3:[/3/except] '3.1': assertion expression failed (val < 3 || 8 < val).
##
---
name: deftype1
desc: default type test
#
schema:
  type: seq
  sequence:
    - type: map
      mapping:
        "name":
        "email":
#
data:
  - name: 123
    email: true
  - name: 3.14
  - email: 2004-01-01
errors:
  - "Value '123' is not of type 'str'. Path: '/0/name'"
  - "Value '2004-01-01' is not of type 'str'. Path: '/2/email'"
  - "Value '3.14' is not of type 'str'. Path: '/1/name'"
  - "Value 'True' is not of type 'str'. Path: '/0/email'"
  ## Kwalify errors
  # :type_unmatch       : 1:3:[/0/name] '123': not a string.
  # :type_unmatch       : 2:3:[/0/email] 'true': not a string.
  # :type_unmatch       : 3:3:[/1/name] '3.14': not a string.
  # :type_unmatch       : 4:3:[/2/email] '2004-01-01': not a string.
##
---
name: ident1
desc: ident constraint test
#
schema:
  type: seq
  sequence:
    - type: map
      mapping:
       "name":
          ident: yes
       "age":
          type: int
#
data:
  - name: foo
    age:  10
  - name: bar
    age:  10
  - name: bar
    age:  10
errors:
  - "Value 'bar' is not unique. Previous path: '/1/name'. Path: '/2/name'"
  ## Kwalify errors
  # :value_notunique    : 5:3:[/2/name] 'bar': is already used at '/1/name'.
##
---
name:  default1
desc:  default value of map
#
schema:
  type: map
  mapping:
    =:
      type: number
      range: 
        min: -10
        max: 10
#
data:
  value1: 0
  value2: 20
  value3: -20
#
errors:
  - "Type 'scalar' has size of '-20', less than min limit '-10'. Path: '/value3'"
  - "Type 'scalar' has size of '20', greater than max limit '10'. Path: '/value2'"
  ## Kwalify errors
  # :range_toolarge     : 2:1:[/value2] '20': too large (> max 10).
  # :range_toosmall     : 3:1:[/value3] '-20': too small (< min -10).
##
---
name:  merge1
desc:  merge maps
#
schema:
  type: map
  mapping:
   "group":
      type: map
      mapping:
       "name": &name
          type: str
          required: yes
       "email": &email
          type: str
          pattern: .+@.+
          required: no
   "user":
      type: map
      mapping:
       "name":
          <<: *name          # merge
          length: {max: 16}  # add
       "email":
          <<: *email     # merge
          required: yes  # override
#
data:
  group:
    name: foo
    email: foo@mail.com
  user:
    name: toooooo-looooong-naaaame
#
errors:
  - "Cannot find required key 'email'. Path: '/user'"
  - "Value: 'toooooo-looooong-naaaame' has length of '24', greater than max limit '16'. Path: '/user/name'"
  ## Kwalify errors
  # :required_nokey     : 5:3:[/user] key 'email:' is required.
  # :length_toolong     : 5:3:[/user/name] 'toooooo-looooong-naaaame': too long (length 24 > max 16).
